{"ast":null,"code":"var _jsxFileName = \"/Users/jason/Documents/UWCompass/frontend/src/pages/program/program.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './program.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Program = () => {\n  _s();\n  const [transcript, setTranscript] = useState('');\n  const [passedCourses, setPassedCourses] = useState([]);\n  const parseTranscript = text => {\n    const lines = text.split('\\n');\n    const courses = [];\n    const courseRegex = /^([A-Z]+\\s\\d+)\\s+(.+?)\\s+([\\d.]+)\\s+([\\d.]+)\\s+(\\d+|CR)$/;\n    lines.forEach(line => {\n      const match = line.match(courseRegex);\n      if (match) {\n        // eslint-disable-next-line\n        const [_, code, description,,, grade] = match;\n        if (grade === 'CR' || parseFloat(grade) >= 50) {\n          courses.push({\n            code,\n            description,\n            grade\n          });\n        }\n      }\n    });\n    setPassedCourses(courses);\n  };\n  const handleTranscriptChange = e => {\n    setTranscript(e.target.value);\n  };\n  const handleParseClick = () => {\n    parseTranscript(transcript);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"transcript-parser\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Transcript Parser\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      value: transcript,\n      onChange: handleTranscriptChange,\n      placeholder: \"Paste your transcript here...\",\n      rows: \"10\",\n      cols: \"50\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleParseClick,\n      children: \"Parse Transcript\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"passed-courses\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Valid Course Attempts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: passedCourses.map((course, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: course.code\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), \": \", course.description, \" - Grade: \", course.grade]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Program, \"Xubf4JccPR+HFChLfxfIQiYnD8A=\");\n_c = Program;\nexport default Program;\nvar _c;\n$RefreshReg$(_c, \"Program\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Program","_s","transcript","setTranscript","passedCourses","setPassedCourses","parseTranscript","text","lines","split","courses","courseRegex","forEach","line","match","_","code","description","grade","parseFloat","push","handleTranscriptChange","e","target","value","handleParseClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","rows","cols","onClick","map","course","index","_c","$RefreshReg$"],"sources":["/Users/jason/Documents/UWCompass/frontend/src/pages/program/program.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport './program.css'\n\nconst Program = () => {\n  const [transcript, setTranscript] = useState('');\n  const [passedCourses, setPassedCourses] = useState([]);\n\n  const parseTranscript = (text) => {\n    const lines = text.split('\\n');\n    const courses = [];\n    const courseRegex = /^([A-Z]+\\s\\d+)\\s+(.+?)\\s+([\\d.]+)\\s+([\\d.]+)\\s+(\\d+|CR)$/;\n\n    lines.forEach(line => {\n      const match = line.match(courseRegex);\n      if (match) {\n        // eslint-disable-next-line\n        const [_, code, description, , , grade] = match;\n        if (grade === 'CR' || parseFloat(grade) >= 50) {\n          courses.push({ code, description, grade });\n        }\n      }\n    });\n    setPassedCourses(courses);\n  };\n\n  const handleTranscriptChange = (e) => {\n    setTranscript(e.target.value);\n  };\n\n  const handleParseClick = () => {\n    parseTranscript(transcript);\n  };\n\n  return (\n    <div className=\"transcript-parser\">\n      <h1>Transcript Parser</h1>\n      <textarea\n        value={transcript}\n        onChange={handleTranscriptChange}\n        placeholder=\"Paste your transcript here...\"\n        rows=\"10\"\n        cols=\"50\"\n      />\n      <button onClick={handleParseClick}>Parse Transcript</button>\n      <div className=\"passed-courses\">\n        <h2>Valid Course Attempts</h2>\n        <ul>\n          {passedCourses.map((course, index) => (\n            <li key={index}>\n              <strong>{course.code}</strong>: {course.description} - Grade: {course.grade}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Program;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}